// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  boardMembers  BoardMember[]
  comments      Comment[]
  activities    Activity[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Priority {
  low
  medium
  high
}

enum Status {
  active
  archived
  deleted
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

model Board {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  status      Status    @default(active)
  createdAt   DateTime  @default(now()) @map("created_at")
  archivedAt  DateTime? @map("archived_at")
  deletedAt   DateTime? @map("deleted_at")
  lists       List[]
  labels      Label[]
  template    Template? @relation("TemplateSource")
  members     BoardMember[]
  activities  Activity[]

  @@map("boards")
}

model BoardMember {
  id        Int      @id @default(autoincrement())
  role      Role     @default(MEMBER)
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   Int      @map("board_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([boardId, userId])
  @@map("board_members")
}

model List {
  id          Int       @id @default(autoincrement())
  title       String
  order       Int
  status      Status    @default(active)
  createdAt   DateTime  @default(now()) @map("created_at")
  archivedAt  DateTime? @map("archived_at")
  deletedAt   DateTime? @map("deleted_at")
  board       Board     @relation(fields: [boardId], references: [id])
  boardId     Int       @map("board_id")
  cards       Card[]
  activities  Activity[]

  @@map("lists")
}

model Label {
  id          Int       @id @default(autoincrement())
  name        String
  color       String
  board       Board     @relation(fields: [boardId], references: [id])
  boardId     Int       @map("board_id")
  cards       Card[]
  createdAt   DateTime  @default(now()) @map("created_at")

  @@map("labels")
}

model Card {
  id            Int       @id @default(autoincrement())
  title         String
  description   String?
  priority      Priority  @default(low)
  status        Status    @default(active)
  order         Int
  dueDate       DateTime? @map("due_date")
  estimatedTime Int?      @map("estimated_time") // in minutes
  labels        Label[]
  createdAt     DateTime  @default(now()) @map("created_at")
  archivedAt    DateTime? @map("archived_at")
  deletedAt     DateTime? @map("deleted_at")
  list          List      @relation(fields: [listId], references: [id])
  listId        Int       @map("list_id")
  comments      Comment[]
  activities    Activity[]

  @@map("cards")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  cardId    Int      @map("card_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("comments")
}

model Activity {
  id          Int      @id @default(autoincrement())
  type        String   // e.g., 'card.created', 'card.moved', 'comment.added'
  data        String   // JSON string containing activity details
  board       Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId     Int      @map("board_id")
  list        List?    @relation(fields: [listId], references: [id])
  listId      Int?     @map("list_id")
  card        Card?    @relation(fields: [cardId], references: [id])
  cardId      Int?     @map("card_id")
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("activities")
}

model Template {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  sourceBoard Board     @relation("TemplateSource", fields: [sourceBoardId], references: [id])
  sourceBoardId Int     @unique @map("source_board_id")
  lists       TemplateList[]
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("templates")
}

model TemplateList {
  id          Int       @id @default(autoincrement())
  title       String
  order       Int
  template    Template  @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId  Int       @map("template_id")
  cards       TemplateCard[]

  @@map("template_lists")
}

model TemplateCard {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  priority    Priority  @default(low)
  order       Int
  estimatedTime Int?    @map("estimated_time")
  list        TemplateList @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId      Int       @map("list_id")

  @@map("template_cards")
}
