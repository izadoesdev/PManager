// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum Priority {
  low
  medium
  high
}

enum Status {
  active
  archived
  deleted
}

model Board {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  status      Status    @default(active)
  createdAt   DateTime  @default(now()) @map("created_at")
  archivedAt  DateTime? @map("archived_at")
  deletedAt   DateTime? @map("deleted_at")
  lists       List[]
  labels      Label[]
  template    Template? @relation("TemplateSource")

  @@map("boards")
}

model List {
  id          Int       @id @default(autoincrement())
  title       String
  order       Int
  status      Status    @default(active)
  createdAt   DateTime  @default(now()) @map("created_at")
  archivedAt  DateTime? @map("archived_at")
  deletedAt   DateTime? @map("deleted_at")
  board       Board     @relation(fields: [boardId], references: [id])
  boardId     Int       @map("board_id")
  cards       Card[]

  @@map("lists")
}

model Label {
  id          Int       @id @default(autoincrement())
  name        String
  color       String
  board       Board     @relation(fields: [boardId], references: [id])
  boardId     Int       @map("board_id")
  cards       Card[]
  createdAt   DateTime  @default(now()) @map("created_at")

  @@map("labels")
}

model Card {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  priority    Priority  @default(low)
  status      Status    @default(active)
  order       Int
  dueDate     DateTime? @map("due_date")
  estimatedTime Int?    @map("estimated_time") // in minutes
  labels      Label[]
  createdAt   DateTime  @default(now()) @map("created_at")
  archivedAt  DateTime? @map("archived_at")
  deletedAt   DateTime? @map("deleted_at")
  list        List      @relation(fields: [listId], references: [id])
  listId      Int       @map("list_id")

  @@map("cards")
}

model Template {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  sourceBoard Board     @relation("TemplateSource", fields: [sourceBoardId], references: [id])
  sourceBoardId Int     @unique @map("source_board_id")
  lists       TemplateList[]
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("templates")
}

model TemplateList {
  id          Int       @id @default(autoincrement())
  title       String
  order       Int
  template    Template  @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId  Int       @map("template_id")
  cards       TemplateCard[]

  @@map("template_lists")
}

model TemplateCard {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  priority    Priority  @default(low)
  order       Int
  estimatedTime Int?    @map("estimated_time")
  list        TemplateList @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId      Int       @map("list_id")

  @@map("template_cards")
}
